using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using SamuraiDomain;
using System;

namespace SamuraiData
{
    public class SamuraiContext : DbContext
    {
        public DbSet<Samurai> Samurais { get; set; }
        public DbSet<Quote> Quotes { get; set; }
        public DbSet<Battle> Battles { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(
                "Data Source=(localdb)\\MSSQLLocalDb; Initial Catalog=SamuraiAppSolution",
                options => options.MaxBatchSize(100))
               .LogTo(Console.WriteLine, new[] { DbLoggerCategory.Database.Command.Name},
               LogLevel.Information).EnableSensitiveDataLogging();
        }


       protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Samurai>()
                .HasMany(s => s.Battles)
                .WithMany(b => b.Samurais)
                .UsingEntity<BattleSamurai>(bs => bs.HasOne<Battle>().WithMany(),
                 bs => bs.HasOne<Samurai>().WithMany()).Property(bs => bs.DateJoined)
                 .HasDefaultValueSql("getdate()");



        }

        //ModelBuilder and all the method called is just used to make EfCore aare of
        // the Many-TOmANY relartiosnhip and the PayLoaf
        // check methosd and underatand 
    }

    // we set the SamurailData project as our startup project for Migration to work..
    // How to create Migration is different in .net5.0 and .Net 3.1


    // we log to console not thr LogtO Method Serve as a Delgate no need for Bracket
    // we can also log to a stream Writer


    // As usual our good boy Logiing jusr display all the things going on
    // it display all the dara from efcore relatiomship to the swl genrated and so
    // we can streamline the data generated by by addding additional Parameter to the
    // Logto Metthod the New[] stuff comes with EfCore
    // While the LogLevel.Information comes from Mivrosft extensions lOgging namepace


    //By default our Log info doesnt display sensitve Data, i.e if u insert a samurai 
    // with  name James, in the LOg file generated u  wont see the name of thr samurai 
    // u display u will onleu se question mark to replace the name of the samursai
    // or other data related to the Samurail
    // so enable senstive data to be dis[;ayed during lOgiing we add
    // thr EnableSensitiveDataLogging Mrthod


    //   options => options.MaxBatchSize(100)
   // the AddRange Method can be used to add unrelated Data
// EFcOE WILL Automatically figure out the Object by itslef what we just did is Batch Operation
// the lImit on Batch Operarion depends on thE Database u are using
}
